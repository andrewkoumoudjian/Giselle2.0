#!/usr/bin/env node
/**
 * This script creates a consolidated icons file that exports all SVG icons
 * This avoids the issue with imports not resolving properly during build
 */

console.log("Script starting...");

import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);
const ROOT_DIR = path.resolve(__dirname, '..');

console.log('Starting icon fix script...');

// Find all SVG icon files
const iconsDir = path.join(ROOT_DIR, 'packages', 'twenty-ui', 'src', 'assets', 'icons');
console.log(`Looking for SVG icons in: ${iconsDir}`);

// If the icons directory doesn't exist, exit
if (!fs.existsSync(iconsDir)) {
  console.error(`Icons directory not found: ${iconsDir}`);
  process.exit(1);
}

// Create the IconsData.ts file with all SVG data
const iconFiles = fs.readdirSync(iconsDir).filter(file => file.endsWith('.svg'));
console.log(`Found ${iconFiles.length} SVG icon files`);

const outputDir = path.join(ROOT_DIR, 'packages', 'twenty-ui', 'src', 'display', 'icon', 'utils');
const outputFile = path.join(outputDir, 'IconsData.ts');

// Make sure the output directory exists
if (!fs.existsSync(outputDir)) {
  console.log(`Creating output directory: ${outputDir}`);
  fs.mkdirSync(outputDir, { recursive: true });
}

// Create file content
console.log('Generating IconsData.ts file...');
let fileContent = `/**
 * This file is auto-generated by scripts/fix-icons.js
 * It contains all the SVG icon data as inline strings
 */

export const IconsData = {
`;

// Read each SVG file and add it to the content
iconFiles.forEach(file => {
  const filePath = path.join(iconsDir, file);
  console.log(`Processing: ${file}`);
  const svgContent = fs.readFileSync(filePath, 'utf8');
  
  // Convert filename to camelCase
  const iconName = file.replace('.svg', '').replace(/-([a-z])/g, (_, letter) => letter.toUpperCase());
  
  fileContent += `  '${iconName}': \`${svgContent.replace(/\`/g, '\\`')}\`,\n`;
});

fileContent += `};\n`;

// Write the file
fs.writeFileSync(outputFile, fileContent);
console.log(`Created icons data file at: ${outputFile}`);

// Now create the IconComponent.tsx file that uses the data
console.log('Creating IconComponent.tsx...');
const iconComponentFile = path.join(outputDir, 'IconComponent.tsx');
const iconComponentContent = `/**
 * This file is auto-generated by scripts/fix-icons.js
 * It contains a component that renders SVG icons from the IconsData
 */

import { useTheme } from '@emotion/react';
import React from 'react';
import { IconsData } from './IconsData';
import { IconComponentProps } from '../types/IconComponent';

export const IconComponent = ({ 
  name, 
  size,
  color
}: IconComponentProps & { name: string }) => {
  const theme = useTheme();
  const iconSize = size ?? theme.icon.size.lg;
  const iconColor = color ?? 'currentColor';
  
  const svgContent = IconsData[name];
  
  if (!svgContent) {
    console.error(\`Icon "\${name}" not found\`);
    return null;
  }
  
  // Create a SVG element with the content
  return (
    <span 
      style={{ 
        display: 'inline-flex', 
        width: iconSize, 
        height: iconSize,
        color: iconColor
      }}
      dangerouslySetInnerHTML={{ 
        __html: svgContent
          .replace(/width="[^"]*"/g, \`width="\${iconSize}"\`)
          .replace(/height="[^"]*"/g, \`height="\${iconSize}"\`)
          .replace(/fill="[^"]*"/g, \`fill="\${iconColor}"\`)
      }} 
    />
  );
};
`;

fs.writeFileSync(iconComponentFile, iconComponentContent);
console.log(`Created icon component file at: ${iconComponentFile}`);

// Create wrapper components for each icon
console.log('Creating icon wrapper components...');

const componentsDir = path.join(ROOT_DIR, 'packages', 'twenty-ui', 'src', 'display', 'icon', 'components');
console.log(`Components directory: ${componentsDir}`);

if (!fs.existsSync(componentsDir)) {
  console.error(`Components directory not found: ${componentsDir}`);
  process.exit(1);
}

let componentsUpdated = 0;

iconFiles.forEach(file => {
  // Convert filename to component name
  let componentName = 'Icon' + file
    .replace('.svg', '')
    .split('-')
    .map(part => part.charAt(0).toUpperCase() + part.slice(1))
    .join('');
  
  // Special cases for prefixed names
  if (file.startsWith('illustration-')) {
    componentName = 'IllustrationIcon' + componentName.replace('IconIllustration', '');
  }
  
  const componentPath = path.join(componentsDir, `${componentName}.tsx`);
  
  console.log(`Checking component: ${componentName}`);
  
  // Check if file exists
  if (fs.existsSync(componentPath)) {
    console.log(`  File exists, updating: ${componentPath}`);
    const iconName = file.replace('.svg', '').replace(/-([a-z])/g, (_, letter) => letter.toUpperCase());
    
    const componentContent = `import { useTheme } from '@emotion/react';
import { IconComponent } from '../utils/IconComponent';
import { IconComponentProps } from '../types/IconComponent';

type ${componentName}Props = Pick<IconComponentProps, 'size' | 'color'>;

export const ${componentName} = (props: ${componentName}Props) => {
  const theme = useTheme();
  const size = props.size ?? theme.icon.size.lg;
  const color = props.color ?? undefined;

  return <IconComponent name="${iconName}" size={size} color={color} />;
};
`;
    
    fs.writeFileSync(componentPath, componentContent);
    componentsUpdated++;
  } else {
    console.log(`  File doesn't exist: ${componentPath}`);
  }
});

console.log(`\nSummary:`);
console.log(`Updated ${componentsUpdated} icon components out of ${iconFiles.length} SVG files`);
console.log('Done!'); 